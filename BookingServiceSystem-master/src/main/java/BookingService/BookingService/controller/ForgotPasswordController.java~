package BookingService.BookingService.controller;

import BookingService.BookingService.dto.request.ChangePassword;
import BookingService.BookingService.dto.request.MailBody;
import BookingService.BookingService.entity.ForgotPassword;
import BookingService.BookingService.entity.User;
import BookingService.BookingService.repository.ForgotPasswordRepository;
import BookingService.BookingService.repository.UserRepository;
import BookingService.BookingService.service.EmailService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;

import java.time.Instant;
import java.util.Date;
import java.util.Objects;
import java.util.Random;
import java.util.Optional;

@RestController
@RequestMapping("/forgotPassword")
public class ForgotPasswordController {

    private final UserRepository userRepository;
    private final EmailService emailService;
    private final ForgotPasswordRepository forgotPasswordRepository;
    private final PasswordEncoder passwordEncoder;

    public ForgotPasswordController(UserRepository userRepository, EmailService emailService,
                                    ForgotPasswordRepository forgotPasswordRepository, PasswordEncoder passwordEncoder) {
        this.userRepository = userRepository;
        this.emailService = emailService;
        this.forgotPasswordRepository = forgotPasswordRepository;
        this.passwordEncoder = passwordEncoder;
    }

    // ‚úÖ 1Ô∏è‚É£ API g·ª≠i mail OTP
    @PostMapping("/verifyMail/{email}")
    public ResponseEntity<String> verifyEMail(@PathVariable String email) {
        Optional<User> optionalUser = userRepository.findByEmail(email);

        if (optionalUser.isEmpty()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng!");
        }

        User user = optionalUser.get();
        int otp = otpGenerator();
        MailBody mailBody = MailBody.builder()
                .to(email)
                .text("M√£ OTP c·ªßa b·∫°n l√†: " + otp + ". M√£ n√†y c√≥ hi·ªáu l·ª±c trong 70 gi√¢y.")
                .subject("OTP cho y√™u c·∫ßu Qu√™n m·∫≠t kh·∫©u")
                .build();

        ForgotPassword fp = ForgotPassword.builder()
                .otp(otp)
                .expirationTime(new Date(System.currentTimeMillis() + 70 * 1000))
                .user(user)
                .build();

        // üü¢ L∆∞u OTP v√†o Database
        forgotPasswordRepository.save(fp);
        System.out.println("üü¢ OTP " + otp + " ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o DB cho email: " + email);

        // üü¢ G·ª≠i email
        emailService.sendSimpleMessage(mailBody);
        System.out.println("üü¢ OTP " + otp + " ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email: " + email);

        return ResponseEntity.ok("Email ch·ª©a m√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i!");
    }

    // ‚úÖ 2Ô∏è‚É£ API ki·ªÉm tra OTP
    @PostMapping("/verifyOtp/{otp}/{email}")
    public ResponseEntity<String> verifyOtp(@PathVariable Integer otp, @PathVariable String email) {
        Optional<User> optionalUser = userRepository.findByEmail(email);
        if (optionalUser.isEmpty()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Email kh√¥ng h·ª£p l·ªá!");
        }

        User user = optionalUser.get();
        Optional<ForgotPassword> optionalFp = forgotPasswordRepository.findByOtpAndUser(otp, user);

        if (optionalFp.isEmpty()) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("M√£ OTP kh√¥ng ƒë√∫ng ho·∫∑c ƒë√£ h·∫øt h·∫°n!");
        }

        ForgotPassword fp = optionalFp.get();
        if (fp.getExpirationTime().before(Date.from(Instant.now()))) {
            forgotPasswordRepository.deleteById(fp.getFpid());
            return ResponseEntity.status(HttpStatus.GONE).body("M√£ OTP ƒë√£ h·∫øt h·∫°n!");
        }

        return ResponseEntity.ok("X√°c th·ª±c OTP th√†nh c√¥ng!");
    }

    // ‚úÖ 3Ô∏è‚É£ API thay ƒë·ªïi m·∫≠t kh·∫©u
    @PostMapping("/changePassword/{email}")
    public ResponseEntity<String> changePasswordHandler(@RequestBody ChangePassword changePassword,
                                                        @PathVariable String email) {
        if (!Objects.equals(changePassword.password(), changePassword.repeatPassword())) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("M·∫≠t kh·∫©u kh√¥ng kh·ªõp!");
        }

        Optional<User> optionalUser = userRepository.findByEmail(email);
        if (optionalUser.isEmpty()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Email kh√¥ng h·ª£p l·ªá!");
        }

        String encodePassword = passwordEncoder.encode(changePassword.password());
        userRepository.updatePassword(email, encodePassword);
        System.out.println("üü¢ M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t cho email: " + email);

        return ResponseEntity.ok("M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh c√¥ng!");
    }

    // ‚úÖ 4Ô∏è‚É£ H√†m t·∫°o OTP
    private Integer otpGenerator() {
        Random random = new Random();
        return random.nextInt(100_000, 999_999);
    }
}
